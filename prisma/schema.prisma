// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  image          String?
  department     String?
  graduationYear String?
  accounts       Account[]
  sessions       Session[]
  internships    Internship[]
  messages       Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Internship {
  id              String    @id @default(cuid())
  company         String
  location        String
  subject         String
  missions        String    @db.Text
  tutor           String
  duration        Int
  year            String
  type            String    @default("3A") // Ajout du champ type avec valeur par d√©faut "3A"
  canRefer        Boolean   @default(false)
  isPublic        Boolean   @default(true)
  studentFeedback String?   @db.Text
  studentId       String
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  messages        Message[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id           String     @id @default(cuid())
  content      String     @db.Text
  isRead       Boolean    @default(false)
  internshipId String
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  senderId     String
  sender       User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
